# generated by datamodel-codegen:
#   filename:  https://optimizer-offgridplanner-app.apps2.rl-institut.de/schema/supply/input
#   timestamp: 2025-06-25T16:31:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum

from pydantic import BaseModel, ConfigDict, Field


class Freq(str, Enum):
    h = "h"


class Index(BaseModel):
    start_date: datetime
    n_days: int = Field(..., ge=1)
    freq: Freq


class Sequences(BaseModel):
    index: Index
    demand: list[float]
    solar_potential: list[float]


class Settings(BaseModel):
    is_selected: bool


class Parameters(BaseModel):
    max_shortage_total: float
    max_shortage_timestep: float
    shortage_penalty_cost: float


class Shortage(BaseModel):
    settings: Settings
    parameters: Parameters


class Settings1(BaseModel):
    is_selected: bool
    design: bool


class Parameters1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    nominal_capacity: float | None = None
    soc_min: float | None = None
    soc_max: float | None = None
    c_rate_in: float | None = None
    c_rate_out: float | None = None
    efficiency: float | None = None
    epc: float | None = None
    variable_cost: float | None = None
    fuel_cost: float | None = None
    fuel_lhv: float | None = None
    min_load: float | None = None
    max_load: float | None = None
    min_efficiency: float | None = None
    max_efficiency: float | None = None


class Component(BaseModel):
    settings: Settings1
    parameters: Parameters1


class EnergySystemDesign(BaseModel):
    battery: Component
    diesel_genset: Component
    inverter: Component
    pv: Component
    rectifier: Component
    shortage: Shortage


class Model(BaseModel):
    sequences: Sequences
    energy_system_design: EnergySystemDesign
